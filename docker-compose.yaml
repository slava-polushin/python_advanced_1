services:
  main:
    build:
      context: ./main_service
      dockerfile: Dockerfile
    container_name: mainserv_app
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    depends_on:
      coordinates:
        condition: service_healthy
      db:
        condition: service_healthy
      price:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://app:mypassword@db:5432/taxi
      - PORT=8000
      - COORDINATES_SERVICE_URL=http://coordinates:8001/coordinates_api/v1/get-coordinates
      - COORDINATES_REDIS_URL=redis://redis:6379/1
      - PRICE_SERVICE_URL=http://price:8002/price_api/v1/get-price
      - PRICE_REDIS_URL=redis://redis:6379/2
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - CELERY_BROKER_URL=redis://redis:6379/0

    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:8000/mainservice_api/v1/health || exit 1
      interval: 5s
      timeout: 5s
      start_period: 20s
      retries: 5

  coordinates:
    build:
      context: ./coordinates_service
      dockerfile: Dockerfile
    container_name: coordinates_srv
    ports:
      - "${PORT:-8001}:${PORT:-8001}"
    environment:
      - PORT=8001
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:8001/coordinates_api/v1/health || exit 1
      interval: 2s
      timeout: 5s
      start_period: 10s
      retries: 3

  price:
    build:
      context: ./price_service
      dockerfile: Dockerfile
    container_name: price_srv
    ports:
      - "${PORT:-8002}:${PORT:-8002}"
    environment:
      - PORT=8002
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:8002/price_api/v1/health || exit 1
      interval: 2s
      timeout: 5s
      start_period: 10s
      retries: 3

  pay:
    build:
      context: ./pay_service
      dockerfile: Dockerfile
    container_name: pay_srv
    environment:
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0

    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:16    
    container_name: taxi_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=taxi
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=mypassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U app -d taxi'"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
      image: redis:7.2-alpine
      container_name: redis_srv
      ports:
        - "6379:6379"
      volumes:
        - redis_data:/data
      restart: unless-stopped
      healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 10s
        timeout: 10s
        retries: 5
        start_period: 10s

  rabbitmq:
    image: rabbitmq:3.13.6-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  celery_worker:
    build:
      context: ./main_service
      dockerfile: Dockerfile
    container_name: celery_worker
    environment:
      - DATABASE_URL=postgresql://taxi:mypassword@db:5432/mydatabase
      - COORDINATES_SERVICE_URL=http://coordinates:8001/coordinates_api/v1/get-coordinates
      - REDIS_URL=redis://redis:6379/1
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      main:
        condition: service_healthy
    command:
      [
        "celery",
        "-A",
        "app.tasks.celery_config",
        "worker",
        "--pool=gevent",
        "--loglevel=info",
        "-Q",
        "default"
      ]
    restart: unless-stopped

  # Дополнительная функциональность для отладки проекта
  # Может быть отключена без последствий для работоспособности приложения  
include: 
  - docker-flower.yaml
  - docker-main_practice.yaml
  - docker-redisinsight.yaml

volumes:
  postgres_data:
  redis_data:
  
  